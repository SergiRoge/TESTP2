/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rmipeer;

import Interficies.IData;
import Interficies.IPeer;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Utilities;

/**
 *
 * @author Llango
 */
public class anadirPersona extends javax.swing.JFrame {

    /**
     * Creates new form creacionGrupo
     */
    IData id;
    IPeer origen;
    MainWindow mw;
    ChatGrupoWindow cgw;
    ArrayList<IPeer> destino = new ArrayList<>();
    LinkedList<String> listaIzquierda = new LinkedList<>();
    LinkedList<String> listaDerecha = new LinkedList<>();
    
    public anadirPersona(IPeer origen, ArrayList<IPeer> destino,ChatGrupoWindow cgw, MainWindow mw) throws RemoteException {
        this.origen = origen;
        this.destino = destino;
        this.cgw = cgw;
        this.mw = mw;
        initComponents();
        init();
    }
  
    public void init() throws RemoteException{
        ConcurrentHashMap aux = mw.getListaAmigos(origen);        
        Enumeration e = aux.keys();
        int cont = 0;
        while(e.hasMoreElements()){
            String key =  (String) e.nextElement();
            if(!comprobarRepetido(key)){
                listaIzquierda.add(key);
                amigosConectados.append(listaIzquierda.getLast() + "\n");
            }
            cont++;
        }
    }
    
    public boolean comprobarRepetido(String key) throws RemoteException{
        boolean trobat = false;
        ArrayList<IPeer> miembrosGrupo = cgw.getMiembrosGrupo(); 
        for(int i=0;i<miembrosGrupo.size();i++){
            System.out.println("Elemento Aux: "+miembrosGrupo.get(i).getName());
        }
        for(int i=0;i<miembrosGrupo.size();i++){
            System.out.println("Key: "+key+" Miembro grupo: "+miembrosGrupo.get(i).getName());
            if(key.equals(miembrosGrupo.get(i).getName())){
                trobat = true;
            }
        }
        return trobat;
    }
    
    public void muestraIzqu(){
        amigosConectados.setText("");
        for(int i = 0; i < listaIzquierda.size(); i++){
            amigosConectados.append(listaIzquierda.get(i) + "\n");
        }            
    }
    
    public void muestraDer(){
        amigosAceptados.setText("");
        for(int i = 0; i < listaDerecha.size(); i++){
            amigosAceptados.append(listaDerecha.get(i) + "\n");
        }                 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        amigosConectados = new javax.swing.JTextArea();
        pasarUno = new javax.swing.JButton();
        pasarTodos = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        amigosAceptados = new javax.swing.JTextArea();
        aceptar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        quitarUno = new javax.swing.JButton();
        quitarTodos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        amigosConectados.setColumns(20);
        amigosConectados.setRows(5);
        jScrollPane1.setViewportView(amigosConectados);

        pasarUno.setText(">");
        pasarUno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasarUnoActionPerformed(evt);
            }
        });

        pasarTodos.setText(">>");
        pasarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasarTodosActionPerformed(evt);
            }
        });

        amigosAceptados.setColumns(20);
        amigosAceptados.setRows(5);
        jScrollPane2.setViewportView(amigosAceptados);

        aceptar.setText("Ok");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        quitarUno.setText("<");
        quitarUno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarUnoActionPerformed(evt);
            }
        });

        quitarTodos.setText("<<");
        quitarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(pasarUno, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pasarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(quitarUno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quitarTodos, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                        .addGap(53, 53, 53)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelar)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pasarUno, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quitarUno, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pasarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quitarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
       
        try {
            // TODO add your handling code here:
            System.out.println("Lista derecha antes de enviar");
            for(int i = 0; i < listaDerecha.size();i++){   
                System.out.println(listaDerecha.get(i));
            }
            for(int i = 0; i < listaDerecha.size();i++){   
                System.out.println("Añado: "+origen.getPeer(listaDerecha.get(i)).getName());
                cgw.setMiembro(origen.getPeer(listaDerecha.get(i)));
            }
            cgw.pintarDestino();
            cgw.anadirTextMiembros();
        } catch (RemoteException ex) {
            Logger.getLogger(anadirPersona.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();        
    }//GEN-LAST:event_aceptarActionPerformed

    private void pasarUnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasarUnoActionPerformed
        // TODO add your handling code here:
       int caretPos = amigosConectados.getCaretPosition();
        int rowNum = (caretPos == 0) ? 1 : 0;
        for (int offset = caretPos; offset > 0;) {
            try {
                offset = Utilities.getRowStart(amigosConectados, offset) - 1;
            } catch (BadLocationException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            rowNum++;
        }       
        int peerClicado = rowNum-1;        
        
        try {
            System.out.println("peer : " + listaIzquierda.get(peerClicado));
            System.out.println("@ : " + origen.getPeer((String)listaIzquierda.get(peerClicado)));            
            //añado derecha y quito izquierda            
            listaDerecha.add(listaIzquierda.get(peerClicado));
            listaIzquierda.remove(peerClicado);              
            muestraIzqu();
            muestraDer();            
        } catch (RemoteException ex) {
        }              
    }//GEN-LAST:event_pasarUnoActionPerformed

    private void pasarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasarTodosActionPerformed
        // TODO add your handling code here:
       boolean end = false;
       int cont = 0;
        while(!end){
            listaDerecha.add(listaIzquierda.get(listaIzquierda.size()-1));
            listaIzquierda.remove(listaIzquierda.size()-1);  
            if(listaIzquierda.size() == 0){
                end = true;
            }
        }
        try{
            muestraIzqu();
            muestraDer();    
        }catch(Exception e){            
        }
    }//GEN-LAST:event_pasarTodosActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false); //you can't see me!
        this.dispose();
    }//GEN-LAST:event_cancelarActionPerformed

    private void quitarUnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarUnoActionPerformed
        int caretPos = amigosAceptados.getCaretPosition();
        int rowNum = (caretPos == 0) ? 1 : 0;
        for (int offset = caretPos; offset > 0;) {
            try {
                offset = Utilities.getRowStart(amigosAceptados, offset) - 1;
            } catch (BadLocationException ex) {
            }
            rowNum++;
        }       
        int peerClicado = rowNum-1;        
        
        try {
            System.out.println("peer : " + listaDerecha.get(peerClicado));
            System.out.println("@ : " + origen.getPeer((String)listaDerecha.get(peerClicado)));
            
            //añado derecha y quito izquierda
            
            listaIzquierda.add(listaDerecha.get(peerClicado));
            listaDerecha.remove(peerClicado);  
            
            amigosConectados.setText("");
            for(int i = 0; i < listaIzquierda.size(); i++){
                amigosConectados.append(listaIzquierda.get(i) + "\n");
            } 
            amigosAceptados.setText("");
            for(int i = 0; i < listaDerecha.size(); i++){
                amigosAceptados.append(listaDerecha.get(i) + "\n");
            }        
        } catch (RemoteException ex) {
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_quitarUnoActionPerformed

    private void quitarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarTodosActionPerformed
        // TODO add your handling code here:
       boolean end = false;
       int cont = 0;
        while(!end){
            listaIzquierda.add(listaDerecha.get(listaDerecha.size()-1));
            listaDerecha.remove(listaDerecha.size()-1);  
            if(listaDerecha.size() == 0){
                end = true;
            }
        }
        try{
            muestraIzqu();
            muestraDer();    
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_quitarTodosActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JTextArea amigosAceptados;
    private javax.swing.JTextArea amigosConectados;
    private javax.swing.JButton cancelar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton pasarTodos;
    private javax.swing.JButton pasarUno;
    private javax.swing.JButton quitarTodos;
    private javax.swing.JButton quitarUno;
    // End of variables declaration//GEN-END:variables
}
